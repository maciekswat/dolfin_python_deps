# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _ufc.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ufc', [dirname(__file__)])
        except ImportError:
            import _ufc
            return _ufc
        if fp is not None:
            try:
                _mod = imp.load_module('_ufc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ufc = swig_import_helper()
    del swig_import_helper
else:
    import _ufc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


SHARED_PTR_DISOWN = _ufc.SHARED_PTR_DISOWN
UFC_VERSION_MAJOR = _ufc.UFC_VERSION_MAJOR
UFC_VERSION_MINOR = _ufc.UFC_VERSION_MINOR
UFC_VERSION_MAINTENANCE = _ufc.UFC_VERSION_MAINTENANCE
interval = _ufc.interval
triangle = _ufc.triangle
quadrilateral = _ufc.quadrilateral
tetrahedron = _ufc.tetrahedron
hexahedron = _ufc.hexahedron
class cell_topology(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ufc.delete_cell_topology
    def __init__(self): 
        _ufc.cell_topology_swiginit(self,_ufc.new_cell_topology())
cell_topology_swigregister = _ufc.cell_topology_swigregister
cell_topology_swigregister(cell_topology)
cvar = _ufc.cvar
UFC_VERSION = cvar.UFC_VERSION

class cell_geometry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ufc.delete_cell_geometry
    def __init__(self): 
        _ufc.cell_geometry_swiginit(self,_ufc.new_cell_geometry())
cell_geometry_swigregister = _ufc.cell_geometry_swigregister
cell_geometry_swigregister(cell_geometry)

class cell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _ufc.cell_swiginit(self,_ufc.new_cell())
    __swig_destroy__ = _ufc.delete_cell
    cell_shape = _swig_property(_ufc.cell_cell_shape_get, _ufc.cell_cell_shape_set)
    topological_dimension = _swig_property(_ufc.cell_topological_dimension_get, _ufc.cell_topological_dimension_set)
    geometric_dimension = _swig_property(_ufc.cell_geometric_dimension_get, _ufc.cell_geometric_dimension_set)
    index = _swig_property(_ufc.cell_index_get, _ufc.cell_index_set)
    local_facet = _swig_property(_ufc.cell_local_facet_get, _ufc.cell_local_facet_set)
    orientation = _swig_property(_ufc.cell_orientation_get, _ufc.cell_orientation_set)
    mesh_identifier = _swig_property(_ufc.cell_mesh_identifier_get, _ufc.cell_mesh_identifier_set)
cell_swigregister = _ufc.cell_swigregister
cell_swigregister(cell)

class function(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ufc.delete_function
function.evaluate = new_instancemethod(_ufc.function_evaluate,None,function)
function_swigregister = _ufc.function_swigregister
function_swigregister(function)

class finite_element(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ufc.delete_finite_element
finite_element.signature = new_instancemethod(_ufc.finite_element_signature,None,finite_element)
finite_element.cell_shape = new_instancemethod(_ufc.finite_element_cell_shape,None,finite_element)
finite_element.topological_dimension = new_instancemethod(_ufc.finite_element_topological_dimension,None,finite_element)
finite_element.geometric_dimension = new_instancemethod(_ufc.finite_element_geometric_dimension,None,finite_element)
finite_element.space_dimension = new_instancemethod(_ufc.finite_element_space_dimension,None,finite_element)
finite_element.value_rank = new_instancemethod(_ufc.finite_element_value_rank,None,finite_element)
finite_element.value_dimension = new_instancemethod(_ufc.finite_element_value_dimension,None,finite_element)
finite_element.evaluate_basis = new_instancemethod(_ufc.finite_element_evaluate_basis,None,finite_element)
finite_element.evaluate_basis_all = new_instancemethod(_ufc.finite_element_evaluate_basis_all,None,finite_element)
finite_element.evaluate_basis_derivatives = new_instancemethod(_ufc.finite_element_evaluate_basis_derivatives,None,finite_element)
finite_element.evaluate_basis_derivatives_all = new_instancemethod(_ufc.finite_element_evaluate_basis_derivatives_all,None,finite_element)
finite_element.evaluate_dof = new_instancemethod(_ufc.finite_element_evaluate_dof,None,finite_element)
finite_element.evaluate_dofs = new_instancemethod(_ufc.finite_element_evaluate_dofs,None,finite_element)
finite_element.interpolate_vertex_values = new_instancemethod(_ufc.finite_element_interpolate_vertex_values,None,finite_element)
finite_element.map_from_reference_cell = new_instancemethod(_ufc.finite_element_map_from_reference_cell,None,finite_element)
finite_element.map_to_reference_cell = new_instancemethod(_ufc.finite_element_map_to_reference_cell,None,finite_element)
finite_element.num_sub_elements = new_instancemethod(_ufc.finite_element_num_sub_elements,None,finite_element)
finite_element.create_sub_element = new_instancemethod(_ufc.finite_element_create_sub_element,None,finite_element)
finite_element.create = new_instancemethod(_ufc.finite_element_create,None,finite_element)
finite_element_swigregister = _ufc.finite_element_swigregister
finite_element_swigregister(finite_element)

class dofmap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ufc.delete_dofmap
dofmap.signature = new_instancemethod(_ufc.dofmap_signature,None,dofmap)
dofmap.needs_mesh_entities = new_instancemethod(_ufc.dofmap_needs_mesh_entities,None,dofmap)
dofmap.topological_dimension = new_instancemethod(_ufc.dofmap_topological_dimension,None,dofmap)
dofmap.geometric_dimension = new_instancemethod(_ufc.dofmap_geometric_dimension,None,dofmap)
dofmap.global_dimension = new_instancemethod(_ufc.dofmap_global_dimension,None,dofmap)
dofmap.local_dimension = new_instancemethod(_ufc.dofmap_local_dimension,None,dofmap)
dofmap.num_facet_dofs = new_instancemethod(_ufc.dofmap_num_facet_dofs,None,dofmap)
dofmap.num_entity_dofs = new_instancemethod(_ufc.dofmap_num_entity_dofs,None,dofmap)
dofmap.tabulate_dofs = new_instancemethod(_ufc.dofmap_tabulate_dofs,None,dofmap)
dofmap.tabulate_facet_dofs = new_instancemethod(_ufc.dofmap_tabulate_facet_dofs,None,dofmap)
dofmap.tabulate_entity_dofs = new_instancemethod(_ufc.dofmap_tabulate_entity_dofs,None,dofmap)
dofmap.tabulate_coordinates = new_instancemethod(_ufc.dofmap_tabulate_coordinates,None,dofmap)
dofmap.num_sub_dofmaps = new_instancemethod(_ufc.dofmap_num_sub_dofmaps,None,dofmap)
dofmap.create_sub_dofmap = new_instancemethod(_ufc.dofmap_create_sub_dofmap,None,dofmap)
dofmap.create = new_instancemethod(_ufc.dofmap_create,None,dofmap)
dofmap_swigregister = _ufc.dofmap_swigregister
dofmap_swigregister(dofmap)

class cell_integral(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ufc.delete_cell_integral
cell_integral.tabulate_tensor = new_instancemethod(_ufc.cell_integral_tabulate_tensor,None,cell_integral)
cell_integral.tabulate_tensor_new = new_instancemethod(_ufc.cell_integral_tabulate_tensor_new,None,cell_integral)
cell_integral_swigregister = _ufc.cell_integral_swigregister
cell_integral_swigregister(cell_integral)

class exterior_facet_integral(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ufc.delete_exterior_facet_integral
exterior_facet_integral.tabulate_tensor = new_instancemethod(_ufc.exterior_facet_integral_tabulate_tensor,None,exterior_facet_integral)
exterior_facet_integral_swigregister = _ufc.exterior_facet_integral_swigregister
exterior_facet_integral_swigregister(exterior_facet_integral)

class interior_facet_integral(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ufc.delete_interior_facet_integral
interior_facet_integral.tabulate_tensor = new_instancemethod(_ufc.interior_facet_integral_tabulate_tensor,None,interior_facet_integral)
interior_facet_integral_swigregister = _ufc.interior_facet_integral_swigregister
interior_facet_integral_swigregister(interior_facet_integral)

class point_integral(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ufc.delete_point_integral
point_integral.tabulate_tensor = new_instancemethod(_ufc.point_integral_tabulate_tensor,None,point_integral)
point_integral_swigregister = _ufc.point_integral_swigregister
point_integral_swigregister(point_integral)

class form(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ufc.delete_form
form.signature = new_instancemethod(_ufc.form_signature,None,form)
form.rank = new_instancemethod(_ufc.form_rank,None,form)
form.num_coefficients = new_instancemethod(_ufc.form_num_coefficients,None,form)
form.num_cell_domains = new_instancemethod(_ufc.form_num_cell_domains,None,form)
form.num_exterior_facet_domains = new_instancemethod(_ufc.form_num_exterior_facet_domains,None,form)
form.num_interior_facet_domains = new_instancemethod(_ufc.form_num_interior_facet_domains,None,form)
form.num_point_domains = new_instancemethod(_ufc.form_num_point_domains,None,form)
form.has_cell_integrals = new_instancemethod(_ufc.form_has_cell_integrals,None,form)
form.has_exterior_facet_integrals = new_instancemethod(_ufc.form_has_exterior_facet_integrals,None,form)
form.has_interior_facet_integrals = new_instancemethod(_ufc.form_has_interior_facet_integrals,None,form)
form.has_point_integrals = new_instancemethod(_ufc.form_has_point_integrals,None,form)
form.create_finite_element = new_instancemethod(_ufc.form_create_finite_element,None,form)
form.create_dofmap = new_instancemethod(_ufc.form_create_dofmap,None,form)
form.create_cell_integral = new_instancemethod(_ufc.form_create_cell_integral,None,form)
form.create_exterior_facet_integral = new_instancemethod(_ufc.form_create_exterior_facet_integral,None,form)
form.create_interior_facet_integral = new_instancemethod(_ufc.form_create_interior_facet_integral,None,form)
form.create_point_integral = new_instancemethod(_ufc.form_create_point_integral,None,form)
form.create_default_cell_integral = new_instancemethod(_ufc.form_create_default_cell_integral,None,form)
form.create_default_exterior_facet_integral = new_instancemethod(_ufc.form_create_default_exterior_facet_integral,None,form)
form.create_default_interior_facet_integral = new_instancemethod(_ufc.form_create_default_interior_facet_integral,None,form)
form.create_default_point_integral = new_instancemethod(_ufc.form_create_default_point_integral,None,form)
form_swigregister = _ufc.form_swigregister
form_swigregister(form)


def ufc_swigversion():
  return _ufc.ufc_swigversion()
ufc_swigversion = _ufc.ufc_swigversion
__version__ = UFC_VERSION
del UFC_VERSION, UFC_VERSION_MAJOR, UFC_VERSION_MINOR

"""Code for adding swig version to ufc extension module."""
tmp = hex(ufc_swigversion())
__swigversion__ = "%d.%d.%d"%(tuple(map(int, [tmp[-5], tmp[-3], tmp[-2:]])))

del tmp, ufc_swigversion



